name: Node.js Build and Deploy  

on:
  push:
    branches:
      - main
      - developer

jobs:
  test:
    name: Run Unit Tests & Code Quality Checks  
    runs-on: ubuntu-latest  

    steps:
      - name: Checkout Code  
        uses: actions/checkout@v4  

      - name: Set Up Node.js  
        uses: actions/setup-node@v4  
        with:
          node-version: '14'  

      - name: Install Dependencies (Frontend)  
        run: |
          cd frontend
          npm install

      - name: Run Tests (Frontend)  
        run: |
          cd frontend
          npm test  

      - name: Install Dependencies (Backend)  
        run: |
          cd backend
          npm install  

      - name: Run ESLint for Code Quality (Backend)  
        run: |
          cd backend
          npx eslint .  # Fixed ESLint command

  build:
    name: Build & Push Docker Images  
    runs-on: ubuntu-latest  
    needs: test  # Ensures "test" job completes successfully first  

    steps:
      - name: Checkout Code  
        uses: actions/checkout@v4  

      - name: Build Docker Images  
        run: |
          docker build -t username/backend-app:latest ./backend
          docker build -t username/frontend-app:latest ./frontend

      - name: Log in to DockerHub  
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin  

      - name: Push Docker Images to DockerHub  
        run: |
          docker push username/backend-app:latest
          docker push username/frontend-app:latest  

  deploy:
    name: Deploy to Linux Server  
    runs-on: ubuntu-latest  
    needs: build  # Ensures "build" job completes successfully first  

    steps:
      - name: Checkout Code  
        uses: actions/checkout@v4  

      - name: Connect to Server & Deploy  
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_KEY }} ${{ secrets.REMOTE_SERVER }} << 'EOF'
            docker pull username/backend-app:latest  
            docker pull username/frontend-app:latest  

            docker stop backend-container || true  
            docker stop frontend-container || true  

            docker rm backend-container || true  
            docker rm frontend-container || true  

            docker run -d --name backend-container -p 5000:5000 username/backend-app:latest  
            docker run -d --name frontend-container -p 3000:3000 username/frontend-app:latest  
          EOF  
